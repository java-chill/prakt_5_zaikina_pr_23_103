6. Очереди и асинхронность
Асинхронная обработка задач и использование очередей сообщений — ключевые подходы для повышения масштабируемости, отказоустойчивости и производительности распределённых систем. Они позволяют разделять процессы во времени и пространстве, обеспечивая гибкость и устойчивость к пикам нагрузки.
6.1. RabbitMQ
Определение: RabbitMQ — ПО, действующее как посредник для передачи данных между различными приложениями и сервисами, реализующий протокол AMQP (Advanced Message Queuing Protocol).
Назначение: Обеспечивает надёжную доставку сообщений между компонентами системы. Поддерживает маршрутизацию, приоритеты, подтверждение доставки и гибкую настройку очередей.
Особенности:
Поддержка различных паттернов обмена (direct, topic, fanout, headers).
Fanout — «Разошлите всем!», Direct — «Только тем, у кого точное имя», Topic — «Тем, у кого подходит шаблон», Headers — «По набору меток (заголовков)».
Гарантированная доставка (с подтверждением).
Хорошо подходит для систем с умеренной нагрузкой и требованием надёжности.
Пример использования: Отправка email-уведомлений, обработка заказов, интеграция между микросервисами.
6.2. Apache Kafka
Определение: Kafka — это распределённая потоковая платформа, ориентированная на высокую пропускную способность и долговременное хранение потоков событий.
Назначение: Используется для построения реального времени потоковой обработки данных, логгирования, аналитики и интеграции систем.
Особенности:
Данные хранятся в топиках (topics), разделённых на партиции (partitions).
Поддерживает масштабирование и отказоустойчивость.
Читатели (consumers) могут читать данные независимо и в своём темпе.
Не удаляет сообщения сразу после чтения (в отличие от RabbitMQ).
Пример использования: Логирование событий, аналитика в реальном времени, event-driven архитектура.
Event-driven архитектура — это способ построения системы, в котором компоненты реагируют на события, а не вызывают друг друга напрямую.
6.3. Celery
Определение: Celery — это распределённая очередь задач на Python, часто используемая с брокерами типа RabbitMQ или Redis.
Назначение: Асинхронное выполнение фоновых задач (например, обработка изображений, отправка писем, тяжёлые вычисления).
Особенности:
Простая интеграция с веб-приложениями на python..
Выполнение фоновых задач.
Можно легко добавить больше копий, чтобы справиться с нагрузкой — без переделки всей системы
Пример использования: Генерация отчётов, обработка файлов, периодические задачи.
6.4. Sidekiq
Определение: Sidekiq — это фреймворк для выполнения фоновых задач в Ruby-приложениях(написанные на языкеRuby) .
Назначение: Аналог Celery, но для экосистемы Ruby.
Особенности:
Использует Redis (бд) в качестве брокера сообщений.
Поддерживает многопоточность (в отличие от Resque, который использует процессы).
Простота настройки и мониторинга.
Пример использования: Отправка email, обработка платежей, интеграции с внешними API.
